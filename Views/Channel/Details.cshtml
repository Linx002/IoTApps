@model IoTApps.Models.Channel

@{
    ViewBag.Title = "Details";
}
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/highcharts-more.js"></script>
<script src="https://code.highcharts.com/modules/solid-gauge.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>

<style>

    .body {
        backface-visibility: 0;
    }

    .highcharts-figure .chart-container {
        width: 300px;
        height: 200px;
        float: left;
    }

    .highcharts-figure, .highcharts-data-table table {
        width: 900px;
        margin: 0 auto;
    }

    .highcharts-data-table table {
        font-family: Verdana, sans-serif;
        border-collapse: collapse;
        border: 1px solid #EBEBEB;
        margin: 10px auto;
        text-align: center;
        width: 100%;
        max-width: 500px;
    }

    .highcharts-data-table caption {
        padding: 1em 0;
        font-size: 1.2em;
        color: #555;
    }

    .highcharts-data-table th {
        font-weight: 900;
        padding: 0.5em;
    }

    .highcharts-data-table td, .highcharts-data-table th, .highcharts-data-table caption {
        padding: 0.5em;
    }

    .highcharts-data-table thead tr, .highcharts-data-table tr:nth-child(even) {
        background: #f8f8f8;
    }

    .highcharts-data-table tr:hover {
        background: #f1f7ff;
    }
</style>

<h2>Details</h2>

<div>
    <h4>Channel</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Key)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Key)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Name)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Name)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Description)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Description)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Field1)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Field1)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Field2)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Field2)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Field3)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Field3)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Field4)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Field4)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Field5)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Field5)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Field6)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Field6)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Field7)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Field7)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Field8)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Field8)
        </dd>

    </dl>
</div>
<div class="col-md-12">
    <div class="form-group">
        <figure class="highcharts-figure">
            <div id="container-pot" class="chart-container"></div>
            <div id="container-tem" class="chart-container"></div>
            <div id="container-hum" class="chart-container"></div>
        </figure>
            @*<div id="container-pot" class="chart-container"></div>*@
    </div>
</div>

<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.id }) |
    @Html.ActionLink("Back to List", "Index")
</p>

<script>
    var chartPot;
    var chartTem;
    var chartHum;

    var gaugeOptions = {
        chart: {
            type: 'solidgauge'
        },

        title: null,

        pane: {
            center: ['50%', '85%'],
            size: '140%',
            startAngle: -90,
            endAngle: 90,
            background: {
                backgroundColor:
                    Highcharts.defaultOptions.legend.backgroundColor || '#EEE',
                innerRadius: '60%',
                outerRadius: '100%',
                shape: 'arc'
            }
        },

        exporting: {
            enabled: false
        },

        tooltip: {
            enabled: false
        },

        // the value axis
        yAxis: {
            stops: [
                [0.1, '#55BF3B'], // green
                [0.5, '#DDDF0D'], // yellow
                [0.9, '#DF5353'] // red
            ],
            lineWidth: 0,
            tickWidth: 0,
            minorTickInterval: null,
            tickAmount: 2,
            title: {
                y: -70
            },
            labels: {
                y: 16
            }
        },

        plotOptions: {
            solidgauge: {
                dataLabels: {
                    y: 5,
                    borderWidth: 0,
                    useHTML: true
                }
            }
        }
    };

    function Graficar(contenedor, min, max, texto, unidades) {
        return Highcharts.chart(contenedor, Highcharts.merge(gaugeOptions, {
            yAxis: {
                min: min,
                max: max,
                title: {
                    text: texto
                }
            },

            credits: {
                enabled: false
            },

            series: [{
                name: texto,
                data: [parseInt('0')],
                dataLabels: {
                    format:
                        '<div style="text-align:center">' +
                        '<span style="font-size:25px">{y}</span><br/>' +
                        '<span style="font-size:12px;opacity:0.4">'+ unidades + '</span>' +
                        '</div>'
                },
                tooltip: {
                    valueSuffix: unidades
                }
            }]
        }));
    }
    $(document).ready(function () {
        //Creamos las tres graficas o las que se requieran
        chartPot = Graficar('container-pot', 100, 1024, 'POT', 'Resistencia');
        chartTem = Graficar('container-tem', 0, 50, 'TMP', 'ºC');
        chartHum = Graficar('container-hum', 20, 80, 'HUM', '%');
    });

    setInterval(function () {

        var point;

        if (chartPot) {
            $.ajax({
                type: 'POST',
                url: "/Channel/GetValue",
                data: JSON.stringify({ channel: '@Model.id', field: 1 }),
                contentType: 'application/json', 
                error: function () { },
                success: function (val) {
                    point = chartPot.series[0].points[0];
                    point.update(parseInt(val));
                }
            })
        }
        if (chartTem) {

            $.ajax({
                type: 'POST',
                url: "/Channel/GetValue",
                data: JSON.stringify({ channel: '@Model.id', field: 2 }),
                contentType: 'application/json',
                error: function () { },
                success: function (val) {
                    point = chartTem.series[0].points[0];
                    point.update(parseInt(val));
                }
            })
        }
        if (chartHum) {
            $.ajax({
                type: 'POST',
                url: "/Channel/GetValue",
                data: JSON.stringify({ channel: '@Model.id', field: 3 }),
                contentType: 'application/json',
                error: function () { },
                success: function (val) {
                    point = chartHum.series[0].points[0];
                    point.update(parseInt(val));
                }
            })
        }
    }, 5000);
</script>